using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lengthy
{
    public class Compiler
    {
        public Compiler()
        {

        }

        IDictionary<int, string> cConversions = new Dictionary<int, string>()
        {
            { 1, "("},
            { 2, ")"},
            { 3, "="},
            { 4, "+"},
            { 5, "-"},
            { 6, "/"},
            { 7, "*"},
            { 8, "&&"},
            { 9, "||"},
            { 10, ">"},
            { 11, "<"},
            { 12, "=="},
            { 13, ">="},
            { 14, "<="},
            { 15, "!="},
            { 16, "\r\nif"},
            { 17, "\r\nwhile"},
            { 18, "\r\n{\r\n"},
            { 19, "\r\n}\r\n"},
            { 20, ";\r\n"},
        };

        public string fixString(string stringToFix)
        {
            if (string.IsNullOrEmpty(stringToFix))
                return stringToFix;

            StringBuilder sb = new StringBuilder();
            foreach (var c in stringToFix)
            {
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '\n' || c == ' ')// ||           ME BEING STUPID BUT MIGHT END UP
                    //c == '(' || c == ')' || c == '=' || c == '+' || c == '-' || c == '/' || c == '*' || c == '&' || c == '|' ||       NEEDING LATER SO NOT REMOVED
                    //c == '>' || c == '<')
                    sb.Append(c);
            }
            return sb.ToString();
        }

        public List<string> varaibles = new List<string>();

        public string convertToC(string orignalLenyCode)
        {
            orignalLenyCode = fixString(orignalLenyCode);
            string[] lenyCode = orignalLenyCode.Split('\n', ' ');
            string result = "";
            result += ("/*\r\n" +
                "C code generated by the Lengthy code, created by UpSideDownMan\r\n" +
                "*/\r\n");
            result += "#include <stdio.h>\r\n#include <stdbool.h>\r\n\r\n";
            result += "int main () \r\n{\r\n";

            for (int i = 0; i < lenyCode.Length; i++)
            {
                if (varaibles.Contains(lenyCode[i]))
                {
                    // VARIABLE SO JUST ADD THE VATIABLE TO RESULT
                    result += lenyCode[i];
                    continue;
                }
                if ((lenyCode[i].Length > 0 && lenyCode[i].Length <= 20))
                {
                    result += cConversions[lenyCode[i].Length];

                    if (i + 1 < lenyCode.Length)
                    {
                        // check if there is a number after the sign
                        int num;
                        bool isNum = int.TryParse(lenyCode[i + 1], out num);
                        if (isNum)
                        {
                            result += lenyCode[i + 1];
                            i++;
                        }
                    }
                    continue;
                }
                switch (lenyCode[i].Length)
                {
                    // create string
                    case 21:
                        result += ("\r\nchar " + lenyCode[i + 1] + "[] = \"" + lenyCode[i + 2] + "\";\r\n");
                        varaibles.Add(lenyCode[i + 1]);
                        i++;
                        i++;
                        break;
                    // create number
                    case 22:
                        result += ("\r\nint " + lenyCode[i + 1] + " = " + lenyCode[i + 2] + ";\r\n");
                        varaibles.Add(lenyCode[i + 1]);
                        i++;
                        i++;
                        break;
                    // create bool
                    case 23:
                        result += ("\r\nbool " + lenyCode[i + 1] + " = " + lenyCode[i + 2] + ";\r\n");
                        varaibles.Add(lenyCode[i + 1]);
                        i++;
                        i++;
                        break;
                    // print string
                    case 24:
                        result += ("\r\nprintf(\"" + lenyCode[i + 1] + "\");\r\n");
                        result += ("printf(\"\\n\");\r\n");
                        i++;
                        break;
                    // print string (variable)
                    case 25:
                        result += ("\r\nprintf(" + lenyCode[i + 1] + ");\r\n");
                        result += ("printf(\"\\n\");\r\n");
                        i++;
                        break;
                    // print number
                    case 26:
                        result += ("\r\nprintf(\"%d\", " + lenyCode[i + 1] + ");\r\n");
                        result += ("printf(\"\\n\");\r\n");
                        i++;
                        break;
                    // input string
                    case 27:
                        result += ("\r\ngets(" + lenyCode[i + 1] + ");\r\n");// +
                                                                             //"\r\ngetch();");
                        i++;
                        break;
                    // input number
                    case 28:
                        result += ("\r\nscanf(\"%d\", &" + lenyCode[i + 1] + ");\r\n");// +
                                                                                       //"\r\ngetch();");
                        i++;
                        break;
                    default:
                        break;
                }
            }

            result += "\r\ngetchar();\r\ngetchar();\r\nreturn 0;\r\n}";

            return result;
        }

        public string fixString2(string stringToFix)
        {
            if (string.IsNullOrEmpty(stringToFix))
                return stringToFix;

            StringBuilder sb = new StringBuilder();
            foreach (var c in stringToFix)
            {
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || /*c == '\n' ||*/ c == ' ' ||
                    c == '(' || c == ')' || c == '=' || c == '+' || c == '-' || c == '/' || c == '*' || c == '&' || c == '|' ||
                    c == '>' || c == '<' || c == '{' || c == '}' || c == '"' || c == '%' || c == '\\' || c == ';' || c == ',' ||
                    c == '[' || c == ']')
                    sb.Append(c);
            }
            return sb.ToString();
        }

        public string convertToLengthy(string orignalCCode)
        {
            // split the code at each line (;) then convert each line at a time in a loop that means that by the
            // end of the line you know you are finished and dont have to do any fancy footwork

            // fix the string to only contain the nececary parts and remove and whitespace
            orignalCCode = fixString2(orignalCCode);

            // split code into lines and create result where the lengthy code will be stored
            string[] cCode = orignalCCode.Split('\n', ';');
            string result = "";

            for (int i = 0; i < cCode.Length; i++)
            {
                result += cCode[i];
                result += "\r\n";
            }
            
            // loop though all of the lines of code
            for (int i = 0; i < cCode.Length; i++)
            {
                // split the current line into its commands and process them one by one
                var commands = cCode[i].Split(' ');
                for (int j = 0; j < commands.Length; j++)
                {
                    // create string
                    // char NAME[] = "STRING";
                    if (commands[j].Equals("char"))
                    {
                        // char
                        result += "123456789012345678901 ";
                        // NAME[]
                        result += commands[j + 1].Substring(0, commands[j + 1].Length - 2);
                        // = (placed automatically but need a space)
                        result += " ";
                        // "STRING";
                        result += commands[j + 3].Substring(1, commands[j + 3].Length - 2);
                        j += 3;
                    }
                    // create number
                    // int NAME = NUMBER;
                    else if (commands[j].Equals("int"))
                    {
                        // int
                        result += "1234567890123456789012 ";
                        // NAME
                        result += commands[j + 1].Substring(0, commands[j + 1].Length);
                        // = (placed automatically but need a space)
                        result += " ";
                        // NUMBER
                        result += commands[j + 3].Substring(0, commands[j + 3].Length);
                        j += 3;
                    }
                    // create bool
                    // bool NAME = VALUE;
                    else if (commands[j].Equals("bool"))
                    {
                        // bool
                        result += "12345678901234567890123 ";
                        // NAME
                        result += commands[j + 1].Substring(0, commands[j + 1].Length);
                        // = (placed automatically but need a space)
                        result += " ";
                        // NUMBER
                        result += commands[j + 3].Substring(0, commands[j + 3].Length);
                        j += 3;
                    }
                    // print number
                    // printf("%d", NUMBER);
                    else if (commands[j].Equals("printf(\"%d\","))
                    {
                        // printf("%d"
                        result += "12345678901234567890123456 ";
                        // NUMBER
                        result += commands[j + 1].Substring(0, commands[j + 1].Length - 1);
                        j += 1;
                    }
                    // print string
                    // printf("STRING");
                    else if (commands[j].Contains("printf(\""))
                    {
                        // printf
                        result += "123456789012345678901234 ";
                        // STRING
                        result += commands[j].Substring(8, commands[j].Length - 2 - 8);
                    }
                    // print string (variable)
                    // printf(VARNAME);
                    else if (commands[j].Contains("printf("))
                    {
                        // printf
                        result += "1234567890123456789012345 ";
                        // VARNAME
                        result += commands[j].Substring(7, commands[j].Length - 1 - 7);
                    }
                    // input string
                    // gets(STRVAR);
                    else if (commands[j].Contains("gets("))
                    {
                        // gets
                        result += "123456789012345678901234567 ";
                        // STRVAR
                        result += commands[j].Substring(5, commands[j].Length - 1 - 5);
                    }
                    // input number
                    // scanf("%d", &NUMVAR);
                    else if (commands[j].Equals("scanf(\"%d\","))
                    {
                        // scanf("%d",
                        result += "1234567890123456789012345678 ";
                        // NUMVAR
                        result += commands[j + 1].Substring(1, commands[j + 1].Length - 1 - 1);
                        j += 1;
                    }
                }
                result += "\r\n";
            }

            /*
            for (int i = 0; i < cCode.Length; i++)
            {
                // check the special cases first
                //print string variable
                if (cCode[i].Contains("printf("))
                {
                    // set to 25
                    result += "1234567890123456789012345 ";
                    result += cCode[++i];
                    result += "\r\r\n";
                }
            }
            */
            return result;
        }
    }
}
