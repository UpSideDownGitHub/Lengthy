using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lengthy
{
    public class Compiler
    {
        public Compiler()
        {

        }

        IDictionary<int, string> cConversions = new Dictionary<int, string>()
        {
            { 1, "("},
            { 2, ")"},
            { 3, "=="},
            { 4, "+"},
            { 5, "-"},
            { 6, "/"},
            { 7, "*"},
            { 8, "&&"},
            { 9, "||"},
            { 10, ">"},
            { 11, "<"},
            { 12, ">="},
            { 13, "<="},
            { 14, "\nif"},
            { 15, "\nwhile"},
            { 16, "\n{\n"},
            { 17, "\n}\n"},
            { 26, "="},
        };

        public string fixString(string stringToFix)
        {
            if (string.IsNullOrEmpty(stringToFix))
                return stringToFix;

            StringBuilder sb = new StringBuilder();
            foreach (var c in stringToFix)
            {
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '\n' || c == ' ')
                    sb.Append(c);
            }
            return sb.ToString();
        }

        public string convertToC(string orignalLenyCode)
        {
            orignalLenyCode = fixString(orignalLenyCode);
            string[] lenyCode = orignalLenyCode.Split('\n', ' ');
            string result = "";
            result += ("/*\n" +
                "C code generated by the Lengthy code, created by UpSideDownMan\n" +
                "*/\n");
            result += "#include <stdio.h>\n#include <stdbool.h>\n\n";
            result += "int main () \n{\n";

            for (int i = 0; i < lenyCode.Length; i++)
            {
                if ((lenyCode[i].Length > 0 && lenyCode[i].Length <= 17) || lenyCode[i].Length == 26)
                {
                    result += cConversions[lenyCode[i].Length];
                    continue;
                }
                switch (lenyCode[i].Length)
                {
                    // create string
                    case 18:
                        result += ("\nchar " + lenyCode[i+1] + "[] = \"" + lenyCode[i+2] + "\";");
                        i++;
                        i++;
                        break;
                    // create number
                    case 19:
                        result += ("\nint " + lenyCode[i + 1] + " = " + lenyCode[i + 2] + ";");
                        i++;
                        i++;
                        break;
                    // create bool
                    case 20:
                        result += ("\nbool " + lenyCode[i + 1] + " = " + lenyCode[i + 2] + ";");
                        i++;
                        i++;
                        break;
                    // print string
                    case 21:
                        result += ("\nprintf(\"" + lenyCode[i + 1] + "\");");
                        result += ("\nprintf(\"\\n\");");
                        i++;
                        break;
                    // print number
                    case 22:
                        result += ("\nprintf(\"%d\", " + lenyCode[i+1] + ");");
                        result += ("\nprintf(\"\\n\");");
                        i++;
                        break;
                    // input string
                    case 23:
                        result += ("\ngets(" + lenyCode[i + 1] + ");");// +
                            //"\ngetch();");
                        i++;
                        break;
                    // input number
                    case 24:
                        result += ("\nscanf(\"%d\", &" + lenyCode[i + 1] + ");");// +
                            //"\ngetch();");
                        i++;
                        break;
                    // print string (variable)
                    case 25:
                        result += ("\nprintf(" + lenyCode[i + 1] + ");");
                        result += ("\nprintf(\"\\n\");");
                        i++;
                        break;
                    default:
                        break;
                }
            }

            result += "\ngetchar();\ngetchar();\nreturn 0;\n}";

            return result;
        }

        public string convertToLengthy(string orignalCCode)
        {

            string[] cCode = orignalCCode.Split('\n', ' ');            
            string result = "";


            // FOR TESTING TO SEE WHERE THE CODE IS SPLIT AND SO HOW TO PROCESS THE CODE
            for (int i = 0; i < cCode.Length; i++)
            {
                cCode[i] += "\r\n";
                //result += cCode[i];  //FOR TESTING
            }
            for (int i = 0; i < cCode.Length; i++)
            {
                // check the special cases first
                //print string variable
                if (cCode[i].Contains("printf("))
                {
                    // set to 25
                    result += "1234567890123456789012345 ";
                    result += cCode[++i];
                    result += "\r\n";
                }
            }
            return result;
        }

    }
}
