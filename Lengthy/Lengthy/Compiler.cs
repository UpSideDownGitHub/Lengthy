using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lengthy
{
    public class Compiler
    {
        public Compiler()
        {

        }

        IDictionary<int, string> cConversions = new Dictionary<int, string>()
        {
            { 1, "("},
            { 2, ")"},
            { 3, "="},
            { 4, "+"},
            { 5, "-"},
            { 6, "/"},
            { 7, "*"},
            { 8, "&&"},
            { 9, "||"},
            { 10, ">"},
            { 11, "<"},
            { 12, "=="},
            { 13, ">="},
            { 14, "<="},
            { 15, "!="},
            { 16, "\r\nif"},
            { 17, "\r\nwhile"},
            { 18, "\r\n{\r\n"},
            { 19, "\r\n}\r\n"},
            { 20, ";\r\n"},
        };

        public string fixString(string stringToFix)
        {
            if (string.IsNullOrEmpty(stringToFix))
                return stringToFix;

            StringBuilder sb = new StringBuilder();
            foreach (var c in stringToFix)
            {
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '\n' || c == ' ')// ||           ME BEING STUPID BUT MIGHT END UP
                    //c == '(' || c == ')' || c == '=' || c == '+' || c == '-' || c == '/' || c == '*' || c == '&' || c == '|' ||       NEEDING LATER SO NOT REMOVED
                    //c == '>' || c == '<')
                    sb.Append(c);
            }
            return sb.ToString();
        }

        public List<string> varaibles = new List<string>();

        public string convertToC(string orignalLenyCode)
        {
            orignalLenyCode = fixString(orignalLenyCode);
            string[] lenyCode = orignalLenyCode.Split('\n', ' ');
            string result = "";
            result += ("/*\r\n" +
                "C code generated by the Lengthy code, created by UpSideDownMan\r\n" +
                "*/\r\n");
            result += "#include <stdio.h>\r\n#include <stdbool.h>\r\n\r\n";
            result += "int main () \r\n{\r\n";

            for (int i = 0; i < lenyCode.Length; i++)
            {
                if (varaibles.Contains(lenyCode[i]))
                {
                    // VARIABLE SO JUST ADD THE VATIABLE TO RESULT
                    result += lenyCode[i];
                    continue;
                }
                if ((lenyCode[i].Length > 0 && lenyCode[i].Length <= 20))
                {
                    result += cConversions[lenyCode[i].Length];
                    // NEED TO CHECK IF THE NEXT ONE IS A NUMBER THEN IF IT IS THEN JUST ADD IT TO THE
                    int num;
                    bool isNum = int.TryParse(lenyCode[i + 1], out num);
                    if (isNum)
                    {
                        result += lenyCode[i + 1];
                        i++;
                    }
                    continue;
                }
                switch (lenyCode[i].Length)
                {
                    // create string
                    case 21:
                        result += ("\r\nchar " + lenyCode[i+1] + "[] = \"" + lenyCode[i+2] + "\";\r\n");
                        varaibles.Add(lenyCode[i + 1]);  
                        i++;
                        i++;
                        break;
                    // create number
                    case 22:
                        result += ("\r\nint " + lenyCode[i + 1] + " = " + lenyCode[i + 2] + ";\r\n");
                        varaibles.Add(lenyCode[i + 1]);
                        i++;
                        i++;
                        break;
                    // create bool
                    case 23:
                        result += ("\r\nbool " + lenyCode[i + 1] + " = " + lenyCode[i + 2] + ";\r\n");
                        varaibles.Add(lenyCode[i + 1]);
                        i++;
                        i++;
                        break;
                    // print string
                    case 24:
                        result += ("\r\nprintf(\"" + lenyCode[i + 1] + "\");\r\n");
                        result += ("printf(\"\\n\");\r\n");
                        i++;
                        break;
                    // print string (variable)
                    case 25:
                        result += ("\r\nprintf(" + lenyCode[i + 1] + ");\r\n");
                        result += ("printf(\"\\n\");\r\n");
                        i++;
                        break;
                    // print number
                    case 26:
                        result += ("\r\nprintf(\"%d\", " + lenyCode[i+1] + ");\r\n");
                        result += ("printf(\"\\n\");\r\n");
                        i++;
                        break;
                    // input string
                    case 27:
                        result += ("\r\ngets(" + lenyCode[i + 1] + ");\r\n");// +
                            //"\r\ngetch();");
                        i++;
                        break;
                    // input number
                    case 28:
                        result += ("\r\nscanf(\"%d\", &" + lenyCode[i + 1] + ");\r\n");// +
                            //"\r\ngetch();");
                        i++;
                        break;
                    default:
                        break;
                }
            }

            result += "\r\ngetchar();\r\ngetchar();\r\nreturn 0;\r\n}";

            return result;
        }













        public string convertToLengthy(string orignalCCode)
        {

            string[] cCode = orignalCCode.Split('\n', ' ');            
            string result = "";


            // FOR TESTING TO SEE WHERE THE CODE IS SPLIT AND SO HOW TO PROCESS THE CODE
            for (int i = 0; i < cCode.Length; i++)
            {
                cCode[i] += "\r\r\n";
                //result += cCode[i];  //FOR TESTING
            }
            for (int i = 0; i < cCode.Length; i++)
            {
                // check the special cases first
                //print string variable
                if (cCode[i].Contains("printf("))
                {
                    // set to 25
                    result += "1234567890123456789012345 ";
                    result += cCode[++i];
                    result += "\r\r\n";
                }
            }
            return result;
        }

    }
}
