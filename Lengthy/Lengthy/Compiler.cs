using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lengthy
{
    public class Compiler
    {
        public Compiler()
        {

        }

        IDictionary<int, string> cConversions = new Dictionary<int, string>()
        {
            { 1, "("},
            { 2, ")"},
            { 3, "="},
            { 4, "+"},
            { 5, "-"},
            { 6, "/"},
            { 7, "*"},
            { 8, "&&"},
            { 9, "||"},
            { 10, ">"},
            { 11, "<"},
            { 12, "=="},
            { 13, ">="},
            { 14, "<="},
            { 15, "!="},
            { 16, "\r\nif"},
            { 17, "\r\nwhile"},
            { 18, "\r\n{\r\n"},
            { 19, "\r\n}\r\n"},
            { 20, ";\r\n"},
        };
        List<string> lengthyConversionsSingle = new List<string>()
        {
            "(",
            ")",
            "if",
            "while",
            "{",
            "}",
            ";"
        };
        List<string> lengthyConversionsSingleNumbers = new List<string>()
        {
            "1 ",
            "12 ",
            "1234567890123456 ",
            "12345678901234567 ",
            "123456789012345678 ",
            "1234567890123456789 ",
            "12345678901234567890 "
        };

        List<string> lengthyConversionsDouble = new List<string>()
        {
            "=",
            "+",
            "-",
            "/",
            "*",
            "&&",
            "||",
            ">",
            "<",
            "==",
            ">=",
            "<=",
            "!=",
        };
        List<string> lengthyConversionsDoubleNumbers = new List<string>()
        {
            "123 ",
            "1234 ",
            "12345 ",
            "123456 ",
            "1234567 ",
            "12345678 ",
            "123456789 ",
            "1234567890 ",
            "12345678901 ",
            "123456789012 ",
            "1234567890123 ",
            "12345678901234 ",
            "123456789012345 "
        };

        /*
         * used to fix the orignal leny code and remove any unecesary characters that have made there way in
         * then return the cleaned string back to convertToC() function so the leny code can be converted to C
         */
        public string fixString(string stringToFix)
        {
            if (string.IsNullOrEmpty(stringToFix))
                return stringToFix;

            StringBuilder sb = new StringBuilder();
            foreach (var c in stringToFix)
            {
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '\n' || c == ' ')
                    sb.Append(c);
            }
            return sb.ToString();
        }

        public List<string> varaibles = new List<string>();

        public string convertToC(string orignalLenyCode)
        {
            // convert the leny code to C and create the initial C document
            orignalLenyCode = fixString(orignalLenyCode);
            string[] lenyCode = orignalLenyCode.Split('\n', ' ');
            string result = "";
            result += ("/*\r\n" +
                "C code generated by the Lengthy code, created by UpSideDownMan\r\n" +
                "*/\r\n");
            result += "#include <stdio.h>\r\n#include <stdbool.h>\r\n\r\n";
            result += "int main () \r\n{\r\n";

            for (int i = 0; i < lenyCode.Length; i++)
            {
                // Variables
                if (varaibles.Contains(lenyCode[i]))
                {
                    // add variable to the lennyCode
                    result += lenyCode[i];
                    continue;
                }
                // Simple instruction (+,-,/,...)
                if ((lenyCode[i].Length > 0 && lenyCode[i].Length <= 20))
                {
                    // add the simple instruction to the code
                    result += cConversions[lenyCode[i].Length];

                    // if there could be a number after
                    if (i + 1 < lenyCode.Length)
                    {
                        int num;
                        bool isNum = int.TryParse(lenyCode[i + 1], out num);
                        // number after the instruction
                        if (isNum)
                        {
                            // add the number to the final code
                            result += lenyCode[i + 1];
                            i++;
                            // try and check if there is more instrunction after that
                            try
                            {
                                // reached the end of the instruction
                                if (i + 1 == lenyCode.Length)
                                {
                                    result += ";\r\n";
                                    continue;
                                }
                                // start a new line if there is a instruction that is not connect to the previous
                                if (!(lenyCode[i + 1].Length > 0 && lenyCode[i + 1].Length <= 20) || varaibles.Contains(lenyCode[i + 1]))
                                {
                                    result += ";\r\n";
                                }
                            }
                            // return the error (used a sumple instruciton with no value)
                            // E.G. 1 + 2 +; - this is an error
                            catch
                            {
                                result += "ERROR";
                            }
                        }
                    }
                    continue;
                }
                // advanced instructions
                switch (lenyCode[i].Length)
                {
                    // create string
                    case 21:
                        result += ("\r\nchar " + lenyCode[i + 1] + "[] = \"" + lenyCode[i + 2] + "\";\r\n");
                        varaibles.Add(lenyCode[i + 1]);
                        i++;
                        i++;
                        break;
                    // create number
                    case 22:
                        result += ("\r\nint " + lenyCode[i + 1] + " = " + lenyCode[i + 2] + ";\r\n");
                        varaibles.Add(lenyCode[i + 1]);
                        i++;
                        i++;
                        break;
                    // create bool
                    case 23:
                        result += ("\r\nbool " + lenyCode[i + 1] + " = " + lenyCode[i + 2] + ";\r\n");
                        varaibles.Add(lenyCode[i + 1]);
                        i++;
                        i++;
                        break;
                    // print string
                    case 24:
                        result += ("\r\nprintf(\"" + lenyCode[i + 1] + "\");\r\n");
                        result += ("printf(\"\\n\");\r\n");
                        i++;
                        break;
                    // print string (variable)
                    case 25:
                        result += ("\r\nprintf(" + lenyCode[i + 1] + ");\r\n");
                        result += ("printf(\"\\n\");\r\n");
                        i++;
                        break;
                    // print number
                    case 26:
                        result += ("\r\nprintf(\"%d\", " + lenyCode[i + 1] + ");\r\n");
                        result += ("printf(\"\\n\");\r\n");
                        i++;
                        break;
                    // input string
                    case 27:
                        result += ("\r\ngets(" + lenyCode[i + 1] + ");\r\n");
                        i++;
                        break;
                    // input number
                    case 28:
                        result += ("\r\nscanf(\"%d\", &" + lenyCode[i + 1] + ");\r\n");
                        i++;
                        break;
                    default:
                        break;
                }
            }

            // adds end of program characters to the window does not instantly close
            result += "\r\ngetchar();\r\ngetchar();\r\nreturn 0;\r\n}";

            // returns the converted lengthy code
            return result;
        }

        /*
         * used by the convertToLengthy() method to clean the orignalCCode so that it can be correctly converted to 
         * lengthy code
         */
        public string fixString2(string stringToFix)
        {
            // if there is no string then dont need to do anything so return
            if (string.IsNullOrEmpty(stringToFix))
                return stringToFix;

            // create a new string builder varaible that i can then add the cleaned string to
            StringBuilder sb = new StringBuilder();

            // for each of the elements of the string
            foreach (var c in stringToFix)
            {
                // if is an accepted character then add to the StringBuilder and if not then remove the variable
                // Note: this step is mostly done to remove invisable characters and special characters
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || /*c == '\n' ||*/ c == ' ' ||
                    c == '(' || c == ')' || c == '=' || c == '+' || c == '-' || c == '/' || c == '*' || c == '&' || c == '|' ||
                    c == '>' || c == '<' || c == '{' || c == '}' || c == '"' || c == '%' || c == '\\' || c == ';' || c == ',' ||
                    c == '[' || c == ']')
                    sb.Append(c);
            }
            return sb.ToString();
        }

        public List<string> cVaraibles = new List<string>();

        /*
         * converts the accepted C code to lengthy code that can then be used in the main window to be compiled and ran
         */
        public string convertToLengthy(string orignalCCode)
        {
            // fix the string to only contain the nececary parts and remove and whitespace
            orignalCCode = fixString2(orignalCCode);

            // split code into lines and create result where the lengthy code will be stored
            string[] cCode = orignalCCode.Split('\n', ';');
            string result = "";

            // loop though all of the lines of code
            for (int i = 0; i < cCode.Length; i++)
            {
                // split the current line into its commands and process them one by one
                var commands = cCode[i].Split(' ');
                for (int j = 0; j < commands.Length; j++)
                {
                    // check to see if the selected command is a single command
                    // command == single (nothing needed after)
                    bool exists = lengthyConversionsSingle.Exists(element => element == commands[j]);
                    if (exists)
                    {
                        // Select the lengthy code from list
                        int index = lengthyConversionsSingle.FindIndex(element => element == commands[j]);
                        result += lengthyConversionsSingleNumbers[index];
                        continue;
                    }
                    // command == double (var/val needed after)
                    exists = lengthyConversionsDouble.Exists(element => element == commands[j]);
                    if (exists)
                    {
                        // Select the lengthy code from list
                        int index = lengthyConversionsDouble.FindIndex(element => element == commands[j]);
                        result += lengthyConversionsDoubleNumbers[index];
                        result += commands[j + 1];
                        result += " ";
                        j++;
                        continue;
                    }

                    // check to see if the selected command is a special command (create, print, input)
                    // create string
                    // char NAME[] = "STRING";
                    if (commands[j].Equals("char"))
                    {
                        // char
                        result += "123456789012345678901 ";
                        // NAME[]
                        var name = commands[j + 1].Substring(0, commands[j + 1].Length - 2);
                        cVaraibles.Add(name);
                        result += name;
                        // = (placed automatically but need a space)
                        result += " ";
                        // "STRING";
                        result += commands[j + 3].Substring(1, commands[j + 3].Length - 2);
                        j += 3;
                    }
                    // create number
                    // int NAME = NUMBER;
                    else if (commands[j].Equals("int"))
                    {
                        // int
                        result += "1234567890123456789012 ";
                        // NAME
                        var name = commands[j + 1].Substring(0, commands[j + 1].Length);
                        cVaraibles.Add(name);
                        result += name;
                        // = (placed automatically but need a space)
                        result += " ";
                        // NUMBER
                        result += commands[j + 3].Substring(0, commands[j + 3].Length);
                        j += 3;
                    }
                    // create bool
                    // bool NAME = VALUE;
                    else if (commands[j].Equals("bool"))
                    {
                        // bool
                        result += "12345678901234567890123 ";
                        // NAME
                        var name = commands[j + 1].Substring(0, commands[j + 1].Length);
                        cVaraibles.Add(name);
                        result += name;
                        // = (placed automatically but need a space)
                        result += " ";
                        // NUMBER
                        result += commands[j + 3].Substring(0, commands[j + 3].Length);
                        j += 3;
                    }
                    // print number
                    // printf("%d", NUMBER);
                    else if (commands[j].Equals("printf(\"%d\","))
                    {
                        // printf("%d"
                        result += "12345678901234567890123456 ";
                        // NUMBER
                        result += commands[j + 1].Substring(0, commands[j + 1].Length - 1);
                        j += 1;
                    }
                    // print string
                    // printf("STRING");
                    else if (commands[j].Contains("printf(\""))
                    {
                        // printf
                        result += "123456789012345678901234 ";
                        // STRING
                        result += commands[j].Substring(8, commands[j].Length - 2 - 8);
                    }
                    // print string (variable)
                    // printf(VARNAME);
                    else if (commands[j].Contains("printf("))
                    {
                        // printf
                        result += "1234567890123456789012345 ";
                        // VARNAME
                        result += commands[j].Substring(7, commands[j].Length - 1 - 7);
                    }
                    // input string
                    // gets(STRVAR);
                    else if (commands[j].Contains("gets("))
                    {
                        // gets
                        result += "123456789012345678901234567 ";
                        // STRVAR
                        result += commands[j].Substring(5, commands[j].Length - 1 - 5);
                    }
                    // input number
                    // scanf("%d", &NUMVAR);
                    else if (commands[j].Equals("scanf(\"%d\","))
                    {
                        // scanf("%d",
                        result += "1234567890123456789012345678 ";
                        // NUMVAR
                        result += commands[j + 1].Substring(1, commands[j + 1].Length - 1 - 1);
                        j += 1;
                    }
                    // check to see if a variable
                    else if (cVaraibles.Contains(commands[j]))
                    {
                        // Variable
                        result += commands[j];
                        result += " ";
                    }
                }
                // add a newline character at the end of the line
                result += "\r\n";
            }
            // return the result which is the converted C code in lengthy format
            return result;
        }
    }
}